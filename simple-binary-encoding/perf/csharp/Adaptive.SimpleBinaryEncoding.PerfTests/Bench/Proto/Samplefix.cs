// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Samplefix {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_tutorial_Decimal64__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.Builder> internal__static_tutorial_Decimal64__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_tutorial_IntQty32__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.Builder> internal__static_tutorial_IntQty32__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_tutorial_MdIncGrp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Builder> internal__static_tutorial_MdIncGrp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_tutorial_MarketDataIncrementalRefreshTrades__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Builder> internal__static_tutorial_MarketDataIncrementalRefreshTrades__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Samplefix() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBzYW1wbGUtZml4LnByb3RvEgh0dXRvcmlhbBokZ29vZ2xlL3Byb3RvYnVm" + 
          "L2NzaGFycF9vcHRpb25zLnByb3RvIjIKCURlY2ltYWw2NBIQCghtYW50aXNz" + 
          "YRgBIAIoAxITCghleHBvbmVudBgCIAEoDToBNyIxCghJbnRRdHkzMhIQCght" + 
          "YW50aXNzYRgBIAIoBRITCghleHBvbmVudBgCIAEoDToBMCLBBAoITWRJbmNH" + 
          "cnASDwoHdHJhZGVJZBgBIAIoBBISCgpzZWN1cml0eUlkGAIgAigEEiYKCW1k" + 
          "RW50cnlQeBgDIAIoCzITLnR1dG9yaWFsLkRlY2ltYWw2NBInCgttZEVudHJ5" + 
          "U2l6ZRgEIAIoCzISLnR1dG9yaWFsLkludFF0eTMyEhYKDm51bWJlck9mT3Jk" + 
          "ZXJzGAUgAigNEjkKDm1kVXBkYXRlQWN0aW9uGAYgAigOMiEudHV0b3JpYWwu" + 
          "TWRJbmNHcnAuTWRVcGRhdGVBY3Rpb24SDgoGcmVwU2VxGAcgAigNEi4KDWFn" + 
          "Z3Jlc3NvclNpZGUYCCACKA4yFy50dXRvcmlhbC5NZEluY0dycC5TaWRlEjoK" + 
          "C21kRW50cnlUeXBlGAkgASgOMh4udHV0b3JpYWwuTWRJbmNHcnAuTWRFbnRy" + 
          "eVR5cGU6BVRSQURFIj4KDk1kVXBkYXRlQWN0aW9uEgcKA05FVxAAEgoKBkNI" + 
          "QU5HRRABEgoKBkRFTEVURRACEgsKB09WRVJMQVkQBSIZCgRTaWRlEgcKA0JV" + 
          "WRABEggKBFNFTEwQAiKUAQoLTWRFbnRyeVR5cGUSBwoDQklEEAASCQoFT0ZG" + 
          "RVIQARIJCgVUUkFERRACEhEKDU9QRU5JTkdfUFJJQ0UQBBIUChBTRVRUTEVN" + 
          "RU5UX1BSSUNFEAYSHgoaVFJBRElOR19TRVNTSU9OX0hJR0hfUFJJQ0UQBxId" + 
          "ChlUUkFESU5HX1NFU1NJT05fTE9XX1BSSUNFEAgiwAIKIk1hcmtldERhdGFJ" + 
          "bmNyZW1lbnRhbFJlZnJlc2hUcmFkZXMSFAoMdHJhbnNhY3RUaW1lGAEgAigE" + 
          "EhYKDmV2ZW50VGltZURlbHRhGAIgAigNEl0KE21hdGNoRXZlbnRJbmRpY2F0" + 
          "b3IYAyACKA4yQC50dXRvcmlhbC5NYXJrZXREYXRhSW5jcmVtZW50YWxSZWZy" + 
          "ZXNoVHJhZGVzLk1hdGNoRXZlbnRJbmRpY2F0b3ISJgoKbWRJbmNHcm91cBgE" + 
          "IAMoCzISLnR1dG9yaWFsLk1kSW5jR3JwImUKE01hdGNoRXZlbnRJbmRpY2F0" + 
          "b3ISDQoJTUlEX0VWRU5UEAASEwoPQkVHSU5OSU5HX0VWRU5UEAESDQoJRU5E" + 
          "X0VWRU5UEAISGwoXQkVHSU5OSU5HX0FORF9FTkRfRVZFTlQQA0I6SAHCPjUK" + 
          "M0FkYXB0aXZlLlNpbXBsZUJpbmFyeUVuY29kaW5nLlBlcmZUZXN0cy5CZW5j" + 
          "aC5Qcm90bw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_tutorial_Decimal64__Descriptor = Descriptor.MessageTypes[0];
        internal__static_tutorial_Decimal64__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.Builder>(internal__static_tutorial_Decimal64__Descriptor,
                new string[] { "Mantissa", "Exponent", });
        internal__static_tutorial_IntQty32__Descriptor = Descriptor.MessageTypes[1];
        internal__static_tutorial_IntQty32__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.Builder>(internal__static_tutorial_IntQty32__Descriptor,
                new string[] { "Mantissa", "Exponent", });
        internal__static_tutorial_MdIncGrp__Descriptor = Descriptor.MessageTypes[2];
        internal__static_tutorial_MdIncGrp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Builder>(internal__static_tutorial_MdIncGrp__Descriptor,
                new string[] { "TradeId", "SecurityId", "MdEntryPx", "MdEntrySize", "NumberOfOrders", "MdUpdateAction", "RepSeq", "AggressorSide", "MdEntryType", });
        internal__static_tutorial_MarketDataIncrementalRefreshTrades__Descriptor = Descriptor.MessageTypes[3];
        internal__static_tutorial_MarketDataIncrementalRefreshTrades__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Builder>(internal__static_tutorial_MarketDataIncrementalRefreshTrades__Descriptor,
                new string[] { "TransactTime", "EventTimeDelta", "MatchEventIndicator", "MdIncGroup", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Decimal64 : pb::GeneratedMessage<Decimal64, Decimal64.Builder> {
    private Decimal64() { }
    private static readonly Decimal64 defaultInstance = new Decimal64().MakeReadOnly();
    private static readonly string[] _decimal64FieldNames = new string[] { "exponent", "mantissa" };
    private static readonly uint[] _decimal64FieldTags = new uint[] { 16, 8 };
    public static Decimal64 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Decimal64 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Decimal64 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_Decimal64__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Decimal64, Decimal64.Builder> InternalFieldAccessors {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_Decimal64__FieldAccessorTable; }
    }
    
    public const int MantissaFieldNumber = 1;
    private bool hasMantissa;
    private long mantissa_;
    public bool HasMantissa {
      get { return hasMantissa; }
    }
    public long Mantissa {
      get { return mantissa_; }
    }
    
    public const int ExponentFieldNumber = 2;
    private bool hasExponent;
    private uint exponent_ = 7;
    public bool HasExponent {
      get { return hasExponent; }
    }
    [global::System.CLSCompliant(false)]
    public uint Exponent {
      get { return exponent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMantissa) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _decimal64FieldNames;
      if (hasMantissa) {
        output.WriteInt64(1, field_names[1], Mantissa);
      }
      if (hasExponent) {
        output.WriteUInt32(2, field_names[0], Exponent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMantissa) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Mantissa);
        }
        if (hasExponent) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Exponent);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Decimal64 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Decimal64 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Decimal64 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Decimal64 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Decimal64 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Decimal64 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Decimal64 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Decimal64 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Decimal64 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Decimal64 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Decimal64 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Decimal64 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Decimal64, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Decimal64 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Decimal64 result;
      
      private Decimal64 PrepareBuilder() {
        if (resultIsReadOnly) {
          Decimal64 original = result;
          result = new Decimal64();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Decimal64 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.Descriptor; }
      }
      
      public override Decimal64 DefaultInstanceForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.DefaultInstance; }
      }
      
      public override Decimal64 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Decimal64) {
          return MergeFrom((Decimal64) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Decimal64 other) {
        if (other == global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMantissa) {
          Mantissa = other.Mantissa;
        }
        if (other.HasExponent) {
          Exponent = other.Exponent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_decimal64FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _decimal64FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMantissa = input.ReadInt64(ref result.mantissa_);
              break;
            }
            case 16: {
              result.hasExponent = input.ReadUInt32(ref result.exponent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMantissa {
        get { return result.hasMantissa; }
      }
      public long Mantissa {
        get { return result.Mantissa; }
        set { SetMantissa(value); }
      }
      public Builder SetMantissa(long value) {
        PrepareBuilder();
        result.hasMantissa = true;
        result.mantissa_ = value;
        return this;
      }
      public Builder ClearMantissa() {
        PrepareBuilder();
        result.hasMantissa = false;
        result.mantissa_ = 0L;
        return this;
      }
      
      public bool HasExponent {
        get { return result.hasExponent; }
      }
      [global::System.CLSCompliant(false)]
      public uint Exponent {
        get { return result.Exponent; }
        set { SetExponent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExponent(uint value) {
        PrepareBuilder();
        result.hasExponent = true;
        result.exponent_ = value;
        return this;
      }
      public Builder ClearExponent() {
        PrepareBuilder();
        result.hasExponent = false;
        result.exponent_ = 7;
        return this;
      }
    }
    static Decimal64() {
      object.ReferenceEquals(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IntQty32 : pb::GeneratedMessage<IntQty32, IntQty32.Builder> {
    private IntQty32() { }
    private static readonly IntQty32 defaultInstance = new IntQty32().MakeReadOnly();
    private static readonly string[] _intQty32FieldNames = new string[] { "exponent", "mantissa" };
    private static readonly uint[] _intQty32FieldTags = new uint[] { 16, 8 };
    public static IntQty32 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IntQty32 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IntQty32 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_IntQty32__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IntQty32, IntQty32.Builder> InternalFieldAccessors {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_IntQty32__FieldAccessorTable; }
    }
    
    public const int MantissaFieldNumber = 1;
    private bool hasMantissa;
    private int mantissa_;
    public bool HasMantissa {
      get { return hasMantissa; }
    }
    public int Mantissa {
      get { return mantissa_; }
    }
    
    public const int ExponentFieldNumber = 2;
    private bool hasExponent;
    private uint exponent_;
    public bool HasExponent {
      get { return hasExponent; }
    }
    [global::System.CLSCompliant(false)]
    public uint Exponent {
      get { return exponent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMantissa) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _intQty32FieldNames;
      if (hasMantissa) {
        output.WriteInt32(1, field_names[1], Mantissa);
      }
      if (hasExponent) {
        output.WriteUInt32(2, field_names[0], Exponent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMantissa) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Mantissa);
        }
        if (hasExponent) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Exponent);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static IntQty32 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IntQty32 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IntQty32 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IntQty32 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IntQty32 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IntQty32 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IntQty32 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IntQty32 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IntQty32 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IntQty32 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IntQty32 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IntQty32 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IntQty32, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IntQty32 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IntQty32 result;
      
      private IntQty32 PrepareBuilder() {
        if (resultIsReadOnly) {
          IntQty32 original = result;
          result = new IntQty32();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IntQty32 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.Descriptor; }
      }
      
      public override IntQty32 DefaultInstanceForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.DefaultInstance; }
      }
      
      public override IntQty32 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IntQty32) {
          return MergeFrom((IntQty32) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IntQty32 other) {
        if (other == global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMantissa) {
          Mantissa = other.Mantissa;
        }
        if (other.HasExponent) {
          Exponent = other.Exponent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_intQty32FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _intQty32FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMantissa = input.ReadInt32(ref result.mantissa_);
              break;
            }
            case 16: {
              result.hasExponent = input.ReadUInt32(ref result.exponent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMantissa {
        get { return result.hasMantissa; }
      }
      public int Mantissa {
        get { return result.Mantissa; }
        set { SetMantissa(value); }
      }
      public Builder SetMantissa(int value) {
        PrepareBuilder();
        result.hasMantissa = true;
        result.mantissa_ = value;
        return this;
      }
      public Builder ClearMantissa() {
        PrepareBuilder();
        result.hasMantissa = false;
        result.mantissa_ = 0;
        return this;
      }
      
      public bool HasExponent {
        get { return result.hasExponent; }
      }
      [global::System.CLSCompliant(false)]
      public uint Exponent {
        get { return result.Exponent; }
        set { SetExponent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExponent(uint value) {
        PrepareBuilder();
        result.hasExponent = true;
        result.exponent_ = value;
        return this;
      }
      public Builder ClearExponent() {
        PrepareBuilder();
        result.hasExponent = false;
        result.exponent_ = 0;
        return this;
      }
    }
    static IntQty32() {
      object.ReferenceEquals(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MdIncGrp : pb::GeneratedMessage<MdIncGrp, MdIncGrp.Builder> {
    private MdIncGrp() { }
    private static readonly MdIncGrp defaultInstance = new MdIncGrp().MakeReadOnly();
    private static readonly string[] _mdIncGrpFieldNames = new string[] { "aggressorSide", "mdEntryPx", "mdEntrySize", "mdEntryType", "mdUpdateAction", "numberOfOrders", "repSeq", "securityId", "tradeId" };
    private static readonly uint[] _mdIncGrpFieldTags = new uint[] { 64, 26, 34, 72, 48, 40, 56, 16, 8 };
    public static MdIncGrp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MdIncGrp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MdIncGrp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_MdIncGrp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MdIncGrp, MdIncGrp.Builder> InternalFieldAccessors {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_MdIncGrp__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MdUpdateAction {
        NEW = 0,
        CHANGE = 1,
        DELETE = 2,
        OVERLAY = 5,
      }
      
      public enum Side {
        BUY = 1,
        SELL = 2,
      }
      
      public enum MdEntryType {
        BID = 0,
        OFFER = 1,
        TRADE = 2,
        OPENING_PRICE = 4,
        SETTLEMENT_PRICE = 6,
        TRADING_SESSION_HIGH_PRICE = 7,
        TRADING_SESSION_LOW_PRICE = 8,
      }
      
    }
    #endregion
    
    public const int TradeIdFieldNumber = 1;
    private bool hasTradeId;
    private ulong tradeId_;
    public bool HasTradeId {
      get { return hasTradeId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TradeId {
      get { return tradeId_; }
    }
    
    public const int SecurityIdFieldNumber = 2;
    private bool hasSecurityId;
    private ulong securityId_;
    public bool HasSecurityId {
      get { return hasSecurityId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SecurityId {
      get { return securityId_; }
    }
    
    public const int MdEntryPxFieldNumber = 3;
    private bool hasMdEntryPx;
    private global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64 mdEntryPx_;
    public bool HasMdEntryPx {
      get { return hasMdEntryPx; }
    }
    public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64 MdEntryPx {
      get { return mdEntryPx_ ?? global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.DefaultInstance; }
    }
    
    public const int MdEntrySizeFieldNumber = 4;
    private bool hasMdEntrySize;
    private global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32 mdEntrySize_;
    public bool HasMdEntrySize {
      get { return hasMdEntrySize; }
    }
    public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32 MdEntrySize {
      get { return mdEntrySize_ ?? global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.DefaultInstance; }
    }
    
    public const int NumberOfOrdersFieldNumber = 5;
    private bool hasNumberOfOrders;
    private uint numberOfOrders_;
    public bool HasNumberOfOrders {
      get { return hasNumberOfOrders; }
    }
    [global::System.CLSCompliant(false)]
    public uint NumberOfOrders {
      get { return numberOfOrders_; }
    }
    
    public const int MdUpdateActionFieldNumber = 6;
    private bool hasMdUpdateAction;
    private global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdUpdateAction mdUpdateAction_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdUpdateAction.NEW;
    public bool HasMdUpdateAction {
      get { return hasMdUpdateAction; }
    }
    public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdUpdateAction MdUpdateAction {
      get { return mdUpdateAction_; }
    }
    
    public const int RepSeqFieldNumber = 7;
    private bool hasRepSeq;
    private uint repSeq_;
    public bool HasRepSeq {
      get { return hasRepSeq; }
    }
    [global::System.CLSCompliant(false)]
    public uint RepSeq {
      get { return repSeq_; }
    }
    
    public const int AggressorSideFieldNumber = 8;
    private bool hasAggressorSide;
    private global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.Side aggressorSide_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.Side.BUY;
    public bool HasAggressorSide {
      get { return hasAggressorSide; }
    }
    public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.Side AggressorSide {
      get { return aggressorSide_; }
    }
    
    public const int MdEntryTypeFieldNumber = 9;
    private bool hasMdEntryType;
    private global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdEntryType mdEntryType_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdEntryType.TRADE;
    public bool HasMdEntryType {
      get { return hasMdEntryType; }
    }
    public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdEntryType MdEntryType {
      get { return mdEntryType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTradeId) return false;
        if (!hasSecurityId) return false;
        if (!hasMdEntryPx) return false;
        if (!hasMdEntrySize) return false;
        if (!hasNumberOfOrders) return false;
        if (!hasMdUpdateAction) return false;
        if (!hasRepSeq) return false;
        if (!hasAggressorSide) return false;
        if (!MdEntryPx.IsInitialized) return false;
        if (!MdEntrySize.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mdIncGrpFieldNames;
      if (hasTradeId) {
        output.WriteUInt64(1, field_names[8], TradeId);
      }
      if (hasSecurityId) {
        output.WriteUInt64(2, field_names[7], SecurityId);
      }
      if (hasMdEntryPx) {
        output.WriteMessage(3, field_names[1], MdEntryPx);
      }
      if (hasMdEntrySize) {
        output.WriteMessage(4, field_names[2], MdEntrySize);
      }
      if (hasNumberOfOrders) {
        output.WriteUInt32(5, field_names[5], NumberOfOrders);
      }
      if (hasMdUpdateAction) {
        output.WriteEnum(6, field_names[4], (int) MdUpdateAction, MdUpdateAction);
      }
      if (hasRepSeq) {
        output.WriteUInt32(7, field_names[6], RepSeq);
      }
      if (hasAggressorSide) {
        output.WriteEnum(8, field_names[0], (int) AggressorSide, AggressorSide);
      }
      if (hasMdEntryType) {
        output.WriteEnum(9, field_names[3], (int) MdEntryType, MdEntryType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTradeId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, TradeId);
        }
        if (hasSecurityId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, SecurityId);
        }
        if (hasMdEntryPx) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, MdEntryPx);
        }
        if (hasMdEntrySize) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, MdEntrySize);
        }
        if (hasNumberOfOrders) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, NumberOfOrders);
        }
        if (hasMdUpdateAction) {
          size += pb::CodedOutputStream.ComputeEnumSize(6, (int) MdUpdateAction);
        }
        if (hasRepSeq) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, RepSeq);
        }
        if (hasAggressorSide) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) AggressorSide);
        }
        if (hasMdEntryType) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) MdEntryType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MdIncGrp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MdIncGrp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MdIncGrp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MdIncGrp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MdIncGrp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MdIncGrp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MdIncGrp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MdIncGrp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MdIncGrp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MdIncGrp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MdIncGrp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MdIncGrp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MdIncGrp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MdIncGrp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MdIncGrp result;
      
      private MdIncGrp PrepareBuilder() {
        if (resultIsReadOnly) {
          MdIncGrp original = result;
          result = new MdIncGrp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MdIncGrp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Descriptor; }
      }
      
      public override MdIncGrp DefaultInstanceForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.DefaultInstance; }
      }
      
      public override MdIncGrp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MdIncGrp) {
          return MergeFrom((MdIncGrp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MdIncGrp other) {
        if (other == global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTradeId) {
          TradeId = other.TradeId;
        }
        if (other.HasSecurityId) {
          SecurityId = other.SecurityId;
        }
        if (other.HasMdEntryPx) {
          MergeMdEntryPx(other.MdEntryPx);
        }
        if (other.HasMdEntrySize) {
          MergeMdEntrySize(other.MdEntrySize);
        }
        if (other.HasNumberOfOrders) {
          NumberOfOrders = other.NumberOfOrders;
        }
        if (other.HasMdUpdateAction) {
          MdUpdateAction = other.MdUpdateAction;
        }
        if (other.HasRepSeq) {
          RepSeq = other.RepSeq;
        }
        if (other.HasAggressorSide) {
          AggressorSide = other.AggressorSide;
        }
        if (other.HasMdEntryType) {
          MdEntryType = other.MdEntryType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mdIncGrpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mdIncGrpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTradeId = input.ReadUInt64(ref result.tradeId_);
              break;
            }
            case 16: {
              result.hasSecurityId = input.ReadUInt64(ref result.securityId_);
              break;
            }
            case 26: {
              global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.Builder subBuilder = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.CreateBuilder();
              if (result.hasMdEntryPx) {
                subBuilder.MergeFrom(MdEntryPx);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MdEntryPx = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.Builder subBuilder = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.CreateBuilder();
              if (result.hasMdEntrySize) {
                subBuilder.MergeFrom(MdEntrySize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MdEntrySize = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasNumberOfOrders = input.ReadUInt32(ref result.numberOfOrders_);
              break;
            }
            case 48: {
              object unknown;
              if(input.ReadEnum(ref result.mdUpdateAction_, out unknown)) {
                result.hasMdUpdateAction = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(6, (ulong)(int)unknown);
              }
              break;
            }
            case 56: {
              result.hasRepSeq = input.ReadUInt32(ref result.repSeq_);
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.aggressorSide_, out unknown)) {
                result.hasAggressorSide = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.mdEntryType_, out unknown)) {
                result.hasMdEntryType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTradeId {
        get { return result.hasTradeId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong TradeId {
        get { return result.TradeId; }
        set { SetTradeId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTradeId(ulong value) {
        PrepareBuilder();
        result.hasTradeId = true;
        result.tradeId_ = value;
        return this;
      }
      public Builder ClearTradeId() {
        PrepareBuilder();
        result.hasTradeId = false;
        result.tradeId_ = 0UL;
        return this;
      }
      
      public bool HasSecurityId {
        get { return result.hasSecurityId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SecurityId {
        get { return result.SecurityId; }
        set { SetSecurityId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSecurityId(ulong value) {
        PrepareBuilder();
        result.hasSecurityId = true;
        result.securityId_ = value;
        return this;
      }
      public Builder ClearSecurityId() {
        PrepareBuilder();
        result.hasSecurityId = false;
        result.securityId_ = 0UL;
        return this;
      }
      
      public bool HasMdEntryPx {
       get { return result.hasMdEntryPx; }
      }
      public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64 MdEntryPx {
        get { return result.MdEntryPx; }
        set { SetMdEntryPx(value); }
      }
      public Builder SetMdEntryPx(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMdEntryPx = true;
        result.mdEntryPx_ = value;
        return this;
      }
      public Builder SetMdEntryPx(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMdEntryPx = true;
        result.mdEntryPx_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMdEntryPx(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMdEntryPx &&
            result.mdEntryPx_ != global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.DefaultInstance) {
            result.mdEntryPx_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Decimal64.CreateBuilder(result.mdEntryPx_).MergeFrom(value).BuildPartial();
        } else {
          result.mdEntryPx_ = value;
        }
        result.hasMdEntryPx = true;
        return this;
      }
      public Builder ClearMdEntryPx() {
        PrepareBuilder();
        result.hasMdEntryPx = false;
        result.mdEntryPx_ = null;
        return this;
      }
      
      public bool HasMdEntrySize {
       get { return result.hasMdEntrySize; }
      }
      public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32 MdEntrySize {
        get { return result.MdEntrySize; }
        set { SetMdEntrySize(value); }
      }
      public Builder SetMdEntrySize(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMdEntrySize = true;
        result.mdEntrySize_ = value;
        return this;
      }
      public Builder SetMdEntrySize(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMdEntrySize = true;
        result.mdEntrySize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMdEntrySize(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMdEntrySize &&
            result.mdEntrySize_ != global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.DefaultInstance) {
            result.mdEntrySize_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.IntQty32.CreateBuilder(result.mdEntrySize_).MergeFrom(value).BuildPartial();
        } else {
          result.mdEntrySize_ = value;
        }
        result.hasMdEntrySize = true;
        return this;
      }
      public Builder ClearMdEntrySize() {
        PrepareBuilder();
        result.hasMdEntrySize = false;
        result.mdEntrySize_ = null;
        return this;
      }
      
      public bool HasNumberOfOrders {
        get { return result.hasNumberOfOrders; }
      }
      [global::System.CLSCompliant(false)]
      public uint NumberOfOrders {
        get { return result.NumberOfOrders; }
        set { SetNumberOfOrders(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNumberOfOrders(uint value) {
        PrepareBuilder();
        result.hasNumberOfOrders = true;
        result.numberOfOrders_ = value;
        return this;
      }
      public Builder ClearNumberOfOrders() {
        PrepareBuilder();
        result.hasNumberOfOrders = false;
        result.numberOfOrders_ = 0;
        return this;
      }
      
      public bool HasMdUpdateAction {
       get { return result.hasMdUpdateAction; }
      }
      public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdUpdateAction MdUpdateAction {
        get { return result.MdUpdateAction; }
        set { SetMdUpdateAction(value); }
      }
      public Builder SetMdUpdateAction(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdUpdateAction value) {
        PrepareBuilder();
        result.hasMdUpdateAction = true;
        result.mdUpdateAction_ = value;
        return this;
      }
      public Builder ClearMdUpdateAction() {
        PrepareBuilder();
        result.hasMdUpdateAction = false;
        result.mdUpdateAction_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdUpdateAction.NEW;
        return this;
      }
      
      public bool HasRepSeq {
        get { return result.hasRepSeq; }
      }
      [global::System.CLSCompliant(false)]
      public uint RepSeq {
        get { return result.RepSeq; }
        set { SetRepSeq(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRepSeq(uint value) {
        PrepareBuilder();
        result.hasRepSeq = true;
        result.repSeq_ = value;
        return this;
      }
      public Builder ClearRepSeq() {
        PrepareBuilder();
        result.hasRepSeq = false;
        result.repSeq_ = 0;
        return this;
      }
      
      public bool HasAggressorSide {
       get { return result.hasAggressorSide; }
      }
      public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.Side AggressorSide {
        get { return result.AggressorSide; }
        set { SetAggressorSide(value); }
      }
      public Builder SetAggressorSide(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.Side value) {
        PrepareBuilder();
        result.hasAggressorSide = true;
        result.aggressorSide_ = value;
        return this;
      }
      public Builder ClearAggressorSide() {
        PrepareBuilder();
        result.hasAggressorSide = false;
        result.aggressorSide_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.Side.BUY;
        return this;
      }
      
      public bool HasMdEntryType {
       get { return result.hasMdEntryType; }
      }
      public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdEntryType MdEntryType {
        get { return result.MdEntryType; }
        set { SetMdEntryType(value); }
      }
      public Builder SetMdEntryType(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdEntryType value) {
        PrepareBuilder();
        result.hasMdEntryType = true;
        result.mdEntryType_ = value;
        return this;
      }
      public Builder ClearMdEntryType() {
        PrepareBuilder();
        result.hasMdEntryType = false;
        result.mdEntryType_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Types.MdEntryType.TRADE;
        return this;
      }
    }
    static MdIncGrp() {
      object.ReferenceEquals(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MarketDataIncrementalRefreshTrades : pb::GeneratedMessage<MarketDataIncrementalRefreshTrades, MarketDataIncrementalRefreshTrades.Builder> {
    private MarketDataIncrementalRefreshTrades() { }
    private static readonly MarketDataIncrementalRefreshTrades defaultInstance = new MarketDataIncrementalRefreshTrades().MakeReadOnly();
    private static readonly string[] _marketDataIncrementalRefreshTradesFieldNames = new string[] { "eventTimeDelta", "matchEventIndicator", "mdIncGroup", "transactTime" };
    private static readonly uint[] _marketDataIncrementalRefreshTradesFieldTags = new uint[] { 16, 24, 34, 8 };
    public static MarketDataIncrementalRefreshTrades DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketDataIncrementalRefreshTrades DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarketDataIncrementalRefreshTrades ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_MarketDataIncrementalRefreshTrades__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketDataIncrementalRefreshTrades, MarketDataIncrementalRefreshTrades.Builder> InternalFieldAccessors {
      get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.internal__static_tutorial_MarketDataIncrementalRefreshTrades__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MatchEventIndicator {
        MID_EVENT = 0,
        BEGINNING_EVENT = 1,
        END_EVENT = 2,
        BEGINNING_AND_END_EVENT = 3,
      }
      
    }
    #endregion
    
    public const int TransactTimeFieldNumber = 1;
    private bool hasTransactTime;
    private ulong transactTime_;
    public bool HasTransactTime {
      get { return hasTransactTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TransactTime {
      get { return transactTime_; }
    }
    
    public const int EventTimeDeltaFieldNumber = 2;
    private bool hasEventTimeDelta;
    private uint eventTimeDelta_;
    public bool HasEventTimeDelta {
      get { return hasEventTimeDelta; }
    }
    [global::System.CLSCompliant(false)]
    public uint EventTimeDelta {
      get { return eventTimeDelta_; }
    }
    
    public const int MatchEventIndicatorFieldNumber = 3;
    private bool hasMatchEventIndicator;
    private global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Types.MatchEventIndicator matchEventIndicator_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Types.MatchEventIndicator.MID_EVENT;
    public bool HasMatchEventIndicator {
      get { return hasMatchEventIndicator; }
    }
    public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Types.MatchEventIndicator MatchEventIndicator {
      get { return matchEventIndicator_; }
    }
    
    public const int MdIncGroupFieldNumber = 4;
    private pbc::PopsicleList<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp> mdIncGroup_ = new pbc::PopsicleList<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp>();
    public scg::IList<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp> MdIncGroupList {
      get { return mdIncGroup_; }
    }
    public int MdIncGroupCount {
      get { return mdIncGroup_.Count; }
    }
    public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp GetMdIncGroup(int index) {
      return mdIncGroup_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTransactTime) return false;
        if (!hasEventTimeDelta) return false;
        if (!hasMatchEventIndicator) return false;
        foreach (global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp element in MdIncGroupList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _marketDataIncrementalRefreshTradesFieldNames;
      if (hasTransactTime) {
        output.WriteUInt64(1, field_names[3], TransactTime);
      }
      if (hasEventTimeDelta) {
        output.WriteUInt32(2, field_names[0], EventTimeDelta);
      }
      if (hasMatchEventIndicator) {
        output.WriteEnum(3, field_names[1], (int) MatchEventIndicator, MatchEventIndicator);
      }
      if (mdIncGroup_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], mdIncGroup_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTransactTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, TransactTime);
        }
        if (hasEventTimeDelta) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, EventTimeDelta);
        }
        if (hasMatchEventIndicator) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) MatchEventIndicator);
        }
        foreach (global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp element in MdIncGroupList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarketDataIncrementalRefreshTrades ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataIncrementalRefreshTrades ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarketDataIncrementalRefreshTrades MakeReadOnly() {
      mdIncGroup_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketDataIncrementalRefreshTrades prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MarketDataIncrementalRefreshTrades, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarketDataIncrementalRefreshTrades cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarketDataIncrementalRefreshTrades result;
      
      private MarketDataIncrementalRefreshTrades PrepareBuilder() {
        if (resultIsReadOnly) {
          MarketDataIncrementalRefreshTrades original = result;
          result = new MarketDataIncrementalRefreshTrades();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarketDataIncrementalRefreshTrades MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Descriptor; }
      }
      
      public override MarketDataIncrementalRefreshTrades DefaultInstanceForType {
        get { return global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.DefaultInstance; }
      }
      
      public override MarketDataIncrementalRefreshTrades BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketDataIncrementalRefreshTrades) {
          return MergeFrom((MarketDataIncrementalRefreshTrades) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketDataIncrementalRefreshTrades other) {
        if (other == global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTransactTime) {
          TransactTime = other.TransactTime;
        }
        if (other.HasEventTimeDelta) {
          EventTimeDelta = other.EventTimeDelta;
        }
        if (other.HasMatchEventIndicator) {
          MatchEventIndicator = other.MatchEventIndicator;
        }
        if (other.mdIncGroup_.Count != 0) {
          result.mdIncGroup_.Add(other.mdIncGroup_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marketDataIncrementalRefreshTradesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marketDataIncrementalRefreshTradesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTransactTime = input.ReadUInt64(ref result.transactTime_);
              break;
            }
            case 16: {
              result.hasEventTimeDelta = input.ReadUInt32(ref result.eventTimeDelta_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.matchEventIndicator_, out unknown)) {
                result.hasMatchEventIndicator = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.mdIncGroup_, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTransactTime {
        get { return result.hasTransactTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong TransactTime {
        get { return result.TransactTime; }
        set { SetTransactTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTransactTime(ulong value) {
        PrepareBuilder();
        result.hasTransactTime = true;
        result.transactTime_ = value;
        return this;
      }
      public Builder ClearTransactTime() {
        PrepareBuilder();
        result.hasTransactTime = false;
        result.transactTime_ = 0UL;
        return this;
      }
      
      public bool HasEventTimeDelta {
        get { return result.hasEventTimeDelta; }
      }
      [global::System.CLSCompliant(false)]
      public uint EventTimeDelta {
        get { return result.EventTimeDelta; }
        set { SetEventTimeDelta(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEventTimeDelta(uint value) {
        PrepareBuilder();
        result.hasEventTimeDelta = true;
        result.eventTimeDelta_ = value;
        return this;
      }
      public Builder ClearEventTimeDelta() {
        PrepareBuilder();
        result.hasEventTimeDelta = false;
        result.eventTimeDelta_ = 0;
        return this;
      }
      
      public bool HasMatchEventIndicator {
       get { return result.hasMatchEventIndicator; }
      }
      public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Types.MatchEventIndicator MatchEventIndicator {
        get { return result.MatchEventIndicator; }
        set { SetMatchEventIndicator(value); }
      }
      public Builder SetMatchEventIndicator(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Types.MatchEventIndicator value) {
        PrepareBuilder();
        result.hasMatchEventIndicator = true;
        result.matchEventIndicator_ = value;
        return this;
      }
      public Builder ClearMatchEventIndicator() {
        PrepareBuilder();
        result.hasMatchEventIndicator = false;
        result.matchEventIndicator_ = global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MarketDataIncrementalRefreshTrades.Types.MatchEventIndicator.MID_EVENT;
        return this;
      }
      
      public pbc::IPopsicleList<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp> MdIncGroupList {
        get { return PrepareBuilder().mdIncGroup_; }
      }
      public int MdIncGroupCount {
        get { return result.MdIncGroupCount; }
      }
      public global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp GetMdIncGroup(int index) {
        return result.GetMdIncGroup(index);
      }
      public Builder SetMdIncGroup(int index, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mdIncGroup_[index] = value;
        return this;
      }
      public Builder SetMdIncGroup(int index, global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mdIncGroup_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMdIncGroup(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mdIncGroup_.Add(value);
        return this;
      }
      public Builder AddMdIncGroup(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mdIncGroup_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMdIncGroup(scg::IEnumerable<global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.MdIncGrp> values) {
        PrepareBuilder();
        result.mdIncGroup_.Add(values);
        return this;
      }
      public Builder ClearMdIncGroup() {
        PrepareBuilder();
        result.mdIncGroup_.Clear();
        return this;
      }
    }
    static MarketDataIncrementalRefreshTrades() {
      object.ReferenceEquals(global::Adaptive.SimpleBinaryEncoding.PerfTests.Bench.Proto.Samplefix.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
